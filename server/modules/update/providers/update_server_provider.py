"""
Update Server Provider - HTTP —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional
from aiohttp import web, web_request, web_response

logger = logging.getLogger(__name__)


class UpdateServerProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä HTTP —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self, config, manifest_provider, artifact_provider, version_provider):
        self.config = config
        self.manifest_provider = manifest_provider
        self.artifact_provider = artifact_provider
        self.version_provider = version_provider
        
        self.app = None
        self.runner = None
        self.site = None
        self.is_running = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UpdateServerProvider...")
            
            # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = await self.create_app()
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdateServerProvider: {e}")
            return False
    
    async def create_app(self) -> web.Application:
        """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app = web.Application()
        
        # CORS middleware
        if self.config.cors_enabled:
            @web.middleware
            async def cors_middleware(request: web_request.Request, handler) -> web_response.Response:
                response = await handler(request)
                response.headers['Access-Control-Allow-Origin'] = '*'
                response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
                response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
                return response
            
            app.middlewares.append(cors_middleware)
        
        # Routes
        app.router.add_get('/appcast.xml', self.appcast_handler)
        app.router.add_get('/downloads/{filename}', self.download_handler)
        app.router.add_get('/health', self.health_handler)
        app.router.add_get('/api/versions', self.versions_handler)
        app.router.add_get('/api/manifests', self.manifests_handler)
        app.router.add_get('/api/artifacts', self.artifacts_handler)
        app.router.add_get('/', self.index_handler)
        
        return app
    
    async def appcast_handler(self, request: web_request.Request) -> web_response.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AppCast XML –¥–ª—è Sparkle"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
            latest_manifest = self.manifest_provider.get_latest_manifest()
            
            if not latest_manifest:
                logger.warning("‚ö†Ô∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return web.Response(
                    text="No manifests available",
                    status=404,
                    content_type='text/plain'
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AppCast XML
            appcast_xml = self._generate_appcast_xml(latest_manifest)
            
            if self.config.log_requests:
                logger.info("üìÑ AppCast XML –∑–∞–ø—Ä–æ—à–µ–Ω")
            
            return web.Response(
                text=appcast_xml,
                content_type='application/xml',
                headers={
                    'Cache-Control': self.config.cache_control,
                    'Pragma': 'no-cache',
                    'Expires': '0'
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AppCast XML: {e}")
            return web.Response(
                text="Error generating AppCast XML",
                status=500,
                content_type='text/plain'
            )
    
    async def download_handler(self, request: web_request.Request) -> web_response.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        try:
            filename = request.match_info['filename']
            file_path = Path(self.config.downloads_dir) / filename
            
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                return web.Response(
                    text="File not found",
                    status=404,
                    content_type='text/plain'
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            actual_size = file_path.stat().st_size
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            latest_manifest = self.manifest_provider.get_latest_manifest()
            expected_size = 0
            if latest_manifest and "artifact" in latest_manifest:
                expected_size = latest_manifest["artifact"].get("size", 0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            if expected_size > 0 and actual_size != expected_size:
                logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_size}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π {actual_size} (—Ä–∞–∑–Ω–∏—Ü–∞: {actual_size - expected_size:+d} –±–∞–π—Ç)")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                try:
                    self.manifest_provider.update_manifest(
                        f"manifest_{latest_manifest['version']}.json",
                        {"artifact": {"size": actual_size}}
                    )
                    logger.info(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: {actual_size} –±–∞–π—Ç")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            
            if self.config.log_downloads:
                logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {filename} (—Ä–∞–∑–º–µ—Ä: {actual_size} –±–∞–π—Ç)")
            
            return web.FileResponse(
                file_path,
                headers={
                    'Content-Type': 'application/octet-stream',
                    'Content-Length': str(actual_size),  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    'Content-Disposition': f'attachment; filename="{filename}"'
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
            return web.Response(
                text="Error downloading file",
                status=500,
                content_type='text/plain'
            )
    
    async def health_handler(self, request: web_request.Request) -> web_response.Response:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            latest_manifest = self.manifest_provider.get_latest_manifest()
            artifacts = self.artifact_provider.list_artifacts()
            
            health_data = {
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "version": "1.0.0",
                "latest_version": latest_manifest.get("version") if latest_manifest else None,
                "latest_build": latest_manifest.get("build") if latest_manifest else None,
                "artifacts_available": len(artifacts),
                "downloads_dir": self.config.downloads_dir,
                "manifests_dir": self.config.manifests_dir
            }
            
            return web.json_response(health_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return web.json_response({
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }, status=500)
    
    async def versions_handler(self, request: web_request.Request) -> web_response.Response:
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏—è—Ö"""
        try:
            manifests = self.manifest_provider.get_all_manifests()
            
            versions_data = {
                "current": self.version_provider.get_default_version(),
                "latest": manifests[0].get("version") if manifests else self.version_provider.get_default_version(),
                "available": [manifest.get("version") for manifest in manifests],
                "manifests": manifests
            }
            
            return web.json_response(versions_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π: {e}")
            return web.json_response({
                "error": str(e)
            }, status=500)
    
    async def manifests_handler(self, request: web_request.Request) -> web_response.Response:
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤"""
        try:
            manifests = self.manifest_provider.get_all_manifests()
            return web.json_response(manifests)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤: {e}")
            return web.json_response({
                "error": str(e)
            }, status=500)
    
    async def artifacts_handler(self, request: web_request.Request) -> web_response.Response:
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        try:
            artifacts = self.artifact_provider.list_artifacts()
            return web.json_response(artifacts)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {e}")
            return web.json_response({
                "error": str(e)
            }, status=500)
    
    async def index_handler(self, request: web_request.Request) -> web_response.Response:
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            latest_manifest = self.manifest_provider.get_latest_manifest()
            artifacts = self.artifact_provider.list_artifacts()
            
            html = self._generate_index_html(latest_manifest, artifacts)
            
            return web.Response(
                text=html,
                content_type='text/html'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return web.Response(
                text="Error generating index page",
                status=500,
                content_type='text/plain'
            )
    
    def _generate_appcast_xml(self, manifest: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AppCast XML –¥–ª—è Sparkle"""
        artifact = manifest.get("artifact", {})
        
        appcast_xml = f'''<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle">
    <channel>
        <title>Nexy Updates</title>
        <description>Updates for Nexy AI Assistant</description>
        <language>en</language>
        <item>
            <title>Version {manifest.get("version", "Unknown")}</title>
            <description>Update to version {manifest.get("version", "Unknown")}</description>
            <pubDate>{datetime.now().strftime("%a, %d %b %Y %H:%M:%S +0000")}</pubDate>
            <enclosure 
                url="{artifact.get("url", "")}"
                sparkle:version="{manifest.get("build", 0)}"
                sparkle:shortVersionString="{manifest.get("version", "1.0.0")}"
                length="{artifact.get("size", 0)}"
                type="application/octet-stream"
                sparkle:dsaSignature="{artifact.get("ed25519", "")}"
                sparkle:minimumSystemVersion="{artifact.get("min_os", "11.0")}"
            />
        </item>
    </channel>
</rss>'''
        
        return appcast_xml
    
    def _generate_index_html(self, latest_manifest: Optional[Dict[str, Any]], artifacts: list) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        latest_version = latest_manifest.get("version") if latest_manifest else "Unknown"
        latest_build = latest_manifest.get("build") if latest_manifest else 0
        artifacts_count = len(artifacts)
        
        html = f'''
<!DOCTYPE html>
<html>
<head>
    <title>Nexy Update Server</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .endpoint {{ background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }}
        .info {{ background: #e8f4fd; padding: 10px; margin: 10px 0; border-radius: 5px; }}
        .status {{ background: #d4edda; padding: 10px; margin: 10px 0; border-radius: 5px; }}
    </style>
</head>
<body>
    <h1>üîÑ Nexy Update Server</h1>
    <p>–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Sparkle</p>
    
    <div class="status">
        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</h3>
        <p><strong>–ü–æ—Ä—Ç:</strong> {self.config.port}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –†–∞–±–æ—Ç–∞–µ—Ç</p>
        <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:</strong> {latest_version} (build {latest_build})</p>
        <p><strong>–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</strong> {artifacts_count}</p>
    </div>
    
    <div class="info">
        <h3>üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏</h3>
        <p><strong>Downloads:</strong> {self.config.downloads_dir}</p>
        <p><strong>Manifests:</strong> {self.config.manifests_dir}</p>
        <p><strong>Keys:</strong> {self.config.keys_dir}</p>
    </div>
    
    <h2>üì° Endpoints</h2>
    <div class="endpoint">
        <strong>AppCast XML:</strong> <a href="/appcast.xml">http://localhost:{self.config.port}/appcast.xml</a>
    </div>
    <div class="endpoint">
        <strong>Downloads:</strong> <a href="/downloads/">http://localhost:{self.config.port}/downloads/</a>
    </div>
    <div class="endpoint">
        <strong>Health Check:</strong> <a href="/health">http://localhost:{self.config.port}/health</a>
    </div>
    <div class="endpoint">
        <strong>Versions API:</strong> <a href="/api/versions">http://localhost:{self.config.port}/api/versions</a>
    </div>
    <div class="endpoint">
        <strong>Manifests API:</strong> <a href="/api/manifests">http://localhost:{self.config.port}/api/manifests</a>
    </div>
    <div class="endpoint">
        <strong>Artifacts API:</strong> <a href="/api/artifacts">http://localhost:{self.config.port}/api/artifacts</a>
    </div>
</body>
</html>'''
        
        return html
    
    async def start_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.is_running:
                logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            if not self.app:
                logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return False
            
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()
            
            self.site = web.TCPSite(self.runner, self.config.host, self.config.port)
            await self.site.start()
            
            self.is_running = True
            
            logger.info("=" * 60)
            logger.info("üîÑ –°–ï–†–í–ï–† –û–ë–ù–û–í–õ–ï–ù–ò–ô –ó–ê–ü–£–©–ï–ù")
            logger.info("=" * 60)
            logger.info(f"üåê URL: http://{self.config.host}:{self.config.port}")
            logger.info(f"üì° AppCast: http://{self.config.host}:{self.config.port}/appcast.xml")
            logger.info(f"üìÅ Downloads: http://{self.config.host}:{self.config.port}/downloads/")
            logger.info(f"üíö Health: http://{self.config.host}:{self.config.port}/health")
            logger.info("=" * 60)
            logger.info("üéØ –ì–æ—Ç–æ–≤ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
            logger.info("=" * 60)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def stop_server(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if not self.is_running:
                logger.info("‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            
            if self.site:
                await self.site.stop()
            if self.runner:
                await self.runner.cleanup()
            
            self.is_running = False
            logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ UpdateServerProvider...")
            await self.stop_server()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ UpdateServerProvider: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return {
            "status": "running" if self.is_running else "stopped",
            "provider": "update_server",
            "host": self.config.host,
            "port": self.config.port,
            "is_running": self.is_running,
            "endpoints": {
                "appcast": f"http://{self.config.host}:{self.config.port}/appcast.xml",
                "downloads": f"http://{self.config.host}:{self.config.port}/downloads/",
                "health": f"http://{self.config.host}:{self.config.port}/health",
                "api_versions": f"http://{self.config.host}:{self.config.port}/api/versions"
            }
        }



