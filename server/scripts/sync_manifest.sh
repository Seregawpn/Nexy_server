#!/bin/bash

# =============================================================================
# üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–ù–ò–§–ï–°–¢–ê –° GITHUB –†–ï–õ–ò–ó–û–ú (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# =============================================================================
# –ê–≤—Ç–æ—Ä: Nexy Development Team
# –î–∞—Ç–∞: 19 –¥–µ–∫–∞–±—Ä—è 2024
# –û–ø–∏—Å–∞–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ GitHub —Ä–µ–ª–∏–∑–∞
# =============================================================================

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo -e "${PURPLE}üöÄ $1${NC}"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REPO="Seregawpn/Nexy_production"
RELEASE_TAG="Update"
FILE_NAME="Nexy.dmg"
MANIFEST_FILE="manifest_1.0.0.json"
MANIFEST_DIR="/home/azureuser/voice-assistant/updates/manifests"
AZURE_RESOURCE_GROUP="Nexy"
AZURE_VM_NAME="nexy-regular"

# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
GITHUB_API_URL="https://api.github.com/repos/$REPO/releases"
DOWNLOAD_URL="https://github.com/$REPO/releases/download/$RELEASE_TAG/$FILE_NAME"

# =============================================================================
# –§–£–ù–ö–¶–ò–ò
# =============================================================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GitHub API
check_github_api() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GitHub API..."
    
    local api_status
    api_status=$(curl -s -o /dev/null -w "%{http_code}" "$GITHUB_API_URL")
    
    if [ "$api_status" != "200" ]; then
        log_error "GitHub API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: $api_status)"
        exit 1
    fi
    
    log_success "GitHub API –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ
get_release_info() {
    log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ '$RELEASE_TAG'..."
    
    local release_data
    release_data=$(curl -s "$GITHUB_API_URL" | jq -r ".[] | select(.tag_name == \"$RELEASE_TAG\")")
    
    if [ -z "$release_data" ] || [ "$release_data" = "null" ]; then
        log_error "–†–µ–ª–∏–∑ '$RELEASE_TAG' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    local file_info
    file_info=$(echo "$release_data" | jq -r ".assets[] | select(.name == \"$FILE_NAME\")")
    
    if [ -z "$file_info" ] || [ "$file_info" = "null" ]; then
        log_error "–§–∞–π–ª '$FILE_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ª–∏–∑–µ '$RELEASE_TAG'"
        exit 1
    fi
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    GITHUB_FILE_SIZE=$(echo "$file_info" | jq -r '.size')
    GITHUB_FILE_URL=$(echo "$file_info" | jq -r '.browser_download_url')
    
    log_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ –ø–æ–ª—É—á–µ–Ω–∞:"
    echo "   üì¶ –†–µ–ª–∏–∑: $RELEASE_TAG"
    echo "   üìÅ –§–∞–π–ª: $FILE_NAME"
    echo "   üìè –†–∞–∑–º–µ—Ä (–∏–∑ API): $GITHUB_FILE_SIZE –±–∞–π—Ç"
    echo "   üîó URL: $GITHUB_FILE_URL"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ API –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π (–±—ã—Å—Ç—Ä–µ–µ)
    log_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ GitHub API –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
check_file_availability() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è..."
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    local http_status
    http_status=$(curl -s -o /dev/null -w "%{http_code}" -L --max-time 10 --head "$GITHUB_FILE_URL")
    
    if [ "$http_status" != "200" ]; then
        log_warning "–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: $http_status)"
        log_info "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º –∏–∑ GitHub API"
    else
        log_success "–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
    fi
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ GitHub API (—É–∂–µ –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ)
    log_success "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ GitHub API: $GITHUB_FILE_SIZE –±–∞–π—Ç"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
get_current_manifest() {
    log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    CURRENT_SIZE=$(az vm run-command invoke \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_VM_NAME" \
        --command-id RunShellScript \
        --scripts "cd $MANIFEST_DIR && cat $MANIFEST_FILE | jq -r '.artifact.size'" \
        --query 'value[0].message' \
        --output tsv | grep -o '[0-9]*' | head -1)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    CURRENT_URL=$(az vm run-command invoke \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_VM_NAME" \
        --command-id RunShellScript \
        --scripts "cd $MANIFEST_DIR && cat $MANIFEST_FILE | jq -r '.artifact.url'" \
        --query 'value[0].message' \
        --output tsv | grep -o 'https://[^"]*' | head -1)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    CURRENT_VERSION=$(az vm run-command invoke \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_VM_NAME" \
        --command-id RunShellScript \
        --scripts "cd $MANIFEST_DIR && cat $MANIFEST_FILE | jq -r '.version'" \
        --query 'value[0].message' \
        --output tsv | grep -o '[0-9.]*' | head -1)
    
    # –ü–æ–ª—É—á–∞–µ–º build –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    CURRENT_BUILD=$(az vm run-command invoke \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_VM_NAME" \
        --command-id RunShellScript \
        --scripts "cd $MANIFEST_DIR && cat $MANIFEST_FILE | jq -r '.build'" \
        --query 'value[0].message' \
        --output tsv | grep -o '[0-9."]*' | head -1)
    
    if [ -z "$CURRENT_SIZE" ] || [ "$CURRENT_SIZE" = "0" ]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞"
        exit 1
    fi
    
    log_success "–¢–µ–∫—É—â–∏–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω:"
    echo "   üì¶ –í–µ—Ä—Å–∏—è: $CURRENT_VERSION"
    echo "   üî¢ Build: $CURRENT_BUILD"
    echo "   üìè –†–∞–∑–º–µ—Ä: $CURRENT_SIZE –±–∞–π—Ç"
    echo "   üîó URL: $CURRENT_URL"
}

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
compare_data() {
    log_info "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö GitHub –∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞..."
    
    local changes_detected=false
    
    echo ""
    echo "üìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•:"
    echo "   GitHub —Ä–∞–∑–º–µ—Ä: $GITHUB_FILE_SIZE –±–∞–π—Ç"
    echo "   –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–∞–∑–º–µ—Ä: $CURRENT_SIZE –±–∞–π—Ç"
    
    if [ "$GITHUB_FILE_SIZE" != "$CURRENT_SIZE" ]; then
        local size_diff=$((GITHUB_FILE_SIZE - CURRENT_SIZE))
        echo "   üìè –†–∞–∑–Ω–∏—Ü–∞: $size_diff –±–∞–π—Ç"
        log_warning "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è!"
        changes_detected=true
    else
        echo "   üìè –†–∞–∑–Ω–∏—Ü–∞: 0 –±–∞–π—Ç"
        log_success "–†–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    fi
    
    echo ""
    echo "   GitHub URL: $GITHUB_FILE_URL"
    echo "   –ú–∞–Ω–∏—Ñ–µ—Å—Ç URL: $CURRENT_URL"
    
    if [ "$GITHUB_FILE_URL" != "$CURRENT_URL" ]; then
        log_warning "URL –∏–∑–º–µ–Ω–∏–ª—Å—è!"
        changes_detected=true
    else
        log_success "URL —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    fi
    
    if [ "$changes_detected" = false ]; then
        log_success "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        exit 0
    fi
    
    log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
update_manifest() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
    local new_manifest
    new_manifest=$(cat << EOF
{
  "version": "$CURRENT_VERSION",
  "build": "$CURRENT_BUILD",
  "release_date": "$(date -u +%Y-%m-%dT%H:%M:%S.%6NZ)",
  "artifact": {
    "type": "dmg",
    "url": "$GITHUB_FILE_URL",
    "size": $GITHUB_FILE_SIZE,
    "sha256": "e62a4571190d94e68a0c95a793729c96610e5c5267945b794f7dfa45bb9cf480",
    "arch": "universal2",
    "min_os": "11.0",
    "ed25519": "VRccoPWghg4P5GNhLj6t/XyBKvujsxrVwO5ZBMI21naKQfkcf+nsj6u9+rxscooycYYPH87zrnLI+P7petJMAw=="
  },
  "critical": false,
  "auto_install": true,
  "notes_url": "$GITHUB_FILE_URL"
}
EOF
)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    az vm run-command invoke \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --name "$AZURE_VM_NAME" \
        --command-id RunShellScript \
        --scripts "
cd $MANIFEST_DIR

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp $MANIFEST_FILE $MANIFEST_FILE.backup.\$(date +%Y%m%d_%H%M%S)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
cat > $MANIFEST_FILE << 'MANIFEST_EOF'
$new_manifest
MANIFEST_EOF

echo '‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:'
echo '   üì¶ –í–µ—Ä—Å–∏—è: $CURRENT_VERSION'
echo '   üî¢ Build: $CURRENT_BUILD'
echo '   üìè –†–∞–∑–º–µ—Ä: $GITHUB_FILE_SIZE –±–∞–π—Ç'
echo '   üîó URL: $GITHUB_FILE_URL'
echo '   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: $((GITHUB_FILE_SIZE - CURRENT_SIZE)) –±–∞–π—Ç'
"
    
    log_success "–ú–∞–Ω–∏—Ñ–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ AppCast XML
check_appcast() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ AppCast XML..."
    
    local appcast_data
    appcast_data=$(curl -s "http://20.151.51.172:8081/appcast.xml")
    
    if [ -z "$appcast_data" ]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AppCast XML"
        exit 1
    fi
    
    local appcast_size
    appcast_size=$(echo "$appcast_data" | grep -o 'length="[^"]*"' | cut -d'"' -f2)
    
    echo "   AppCast XML —Ä–∞–∑–º–µ—Ä: $appcast_size –±–∞–π—Ç"
    echo "   GitHub —Ä–∞–∑–º–µ—Ä: $GITHUB_FILE_SIZE –±–∞–π—Ç"
    
    if [ "$appcast_size" = "$GITHUB_FILE_SIZE" ]; then
        log_success "AppCast XML —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"
    else
        log_warning "AppCast XML —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    fi
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_verification() {
    log_info "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..."
    
    echo ""
    echo "üß™ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:"
    echo "   üîó GitHub: $GITHUB_FILE_SIZE –±–∞–π—Ç"
    echo "   üìÑ –ú–∞–Ω–∏—Ñ–µ—Å—Ç: $GITHUB_FILE_SIZE –±–∞–π—Ç"
    echo "   üìã AppCast: $(curl -s "http://20.151.51.172:8081/appcast.xml" | grep -o 'length="[^"]*"' | cut -d'"' -f2) –±–∞–π—Ç"
    echo "   üîó URLs: $(curl -s "http://20.151.51.172:8081/appcast.xml" | grep -o 'url="[^"]*"' | cut -d'"' -f2)"
    
    log_success "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# =============================================================================

main() {
    log_header "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–ù–ò–§–ï–°–¢–ê –° GITHUB"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! command -v jq &> /dev/null; then
        log_error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install jq"
        exit 1
    fi
    
    if ! command -v az &> /dev/null; then
        log_error "Azure CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install azure-cli"
        exit 1
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    check_github_api
    get_release_info
    check_file_availability
    get_current_manifest
    compare_data
    update_manifest
    check_appcast
    final_verification
    
    echo ""
    log_success "üéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
    echo "   –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å GitHub —Ä–µ–ª–∏–∑–æ–º"
    echo "   –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"